$08080A ; bit info header

### multiline comment
x = 44;

for(i = 2; square(i) < x; i++) {
	// x % i == 0
	if(mod(x, i) == 0) {
		println("not prime");
		end;
	}
}

println("prime");
end;
###

#define var_non_prime 2
#define var_prime 13
#define var_x 0
#define var_i 1

DB var_non_prime "Not prime.", 00
DB var_prime "Prime!", 00

; init
LD A, 44
ST A, [var_x]

; loop
LD A, 2
ST A, [var_i]
loop:
	; check conditional
	JSR func_square
	LD B, [var_x]
	BLT A, B, loop_start
	JMP break
	
	loop_start:
		LD A, [var_x]
		LD B, [var_i]
		JSR func_mod
		BNZ A, loop_end
		LD A, var_non_prime
		JSR func_println
		INT 0x00
	
	loop_end:
	LD A, [var_i]
	ADD A, A, 1
	ST A, [var_i]
	JMP loop

break:
LD A, var_prime
JSR func_println
INT 0x00

func_mod: ; a,b consumed ret a
	BLT A, B, func_mod_end ; if A < B, return
	SUB A, A, B ; else subtract b from a
	JMP func_mod
func_mod_end:
	RET
	
func_square: ; a,b,c consumed ret a
	LD B, A
	LD C, A
	LD A, 0
	func_square_loop:
		BZ C, func_square_end
		SUB C, C, 1
		ADD A, A, B
		JMP func_square_loop
	func_square_end:
	RET
	
func_println: ; a,b consumed ret none
	LD B, [A]
	BZ B, func_println_fin
	INT 0x0D
	ADD A, A, 1
	JMP func_println
	func_println_fin:
		LD B, 0x0A
		INT 0x0D
		RET




	
	
	
	